const User = require('./model/user');
const Visitor = require('./model/visitor');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');

// // POST route for user login
app.post('/login',async(req, res) =>{
    try {
      // Implement your login logic (e.g., validate credentials against the database)
      const { username, password } = req.body;
      const user = await User.findOne({username});
  
      if (!user) {
        return res.status(401).json({ error: 'Invalid credentials' });
      }
  
      // Compare the provided password with the hashed password using bcrypt
      const isPasswordValid = await bcrypt.compare(password, user.password);
  
      if (!isPasswordValid) {
          return res.status(401).json({ error: 'Invalid credentials' });
      }
  
      // Generate a JWT token
      const token = jwt.sign({ userId: user._id, category: user.category }, 'vms2', {
        expiresIn: '1h',
      });
  
      // Check the user's category and generate the appropriate link
      let redirectLink;
      if (user.category === 'host') {
          redirectLink = `/host/${user._id}`;
      } else if (user.category === 'admin') {
          redirectLink = `/admin`;
      }
      res.json({
          username,
          token,
          category: user.category,
          redirectLink,
          Authorization: token,
          "Content-Type": "application/json",
        });
        
        
    } catch (error) {
      console.error('Error during login:', error);
        // Log additional information about the error
      console.error('Error Stack:', error.stack);
      // Handle different types of errors
      if (error.name === 'ValidationError') {
        return res.status(400).json({ error: 'Invalid input data' });
      } else {
        return res.status(500).json({ error: 'Internal Server Error' });
      }
    }
});

// app.get('/:hostId', async (req, res) => {
//     try {
//       const { hostId } = req.params;
  
//       // Assuming hostId is the user's ID
//       const user = await User.findById(hostId);
  
//       if (!user) {
//         return res.status(404).json({ error: 'User not found' });
//       }
  
//       const { username } = user;
//       res.json({ message: `Welcome, ${username}!` });
//     } catch (error) {
//       console.error('Error getting welcome message:', error);
//       res.status(500).json({ error: 'Internal Server Error' });
//     }
// })

// app.get('/:hostId/visitor',async (req, res) => {
//     try {
//       // Assuming req.user is populated by your authentication middleware
//       const { userId } = req.user;
  
//       // Find the host by userId
//       const host = await User.findById(userId);
  
//       if (!host) {
//         return res.status(404).json({ error: 'Host not found' });
//       }
  
//       // Get visitors registered under the host
//       const visitors = host.visitors;
  
//       res.json({ visitors });
//     } catch (error) {
//       console.error('Error getting visitors:', error);
//       res.status(500).json({ error: 'Internal Server Error' });
//     }
// })