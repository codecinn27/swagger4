const User = require('./model/user');
const Visitor = require('./model/visitor');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');



// // POST route for user login
app.post('/login',async(req, res) =>{
    try {
      // Implement your login logic (e.g., validate credentials against the database)
      const { username, password } = req.body;
      const user = await User.findOne({username});
  
      if (!user) {
        return res.status(401).json({ error: 'Invalid credentials' });
      }
  
      // Compare the provided password with the hashed password using bcrypt
      const isPasswordValid = await bcrypt.compare(password, user.password);
  
      if (!isPasswordValid) {
          return res.status(401).json({ error: 'Invalid credentials' });
      }
  
      // Generate a JWT token
      const token = jwt.sign({ userId: user._id, category: user.category }, 'vms2', {
        expiresIn: '1h',
      });
  
      // Check the user's category and generate the appropriate link
      let redirectLink;
      if (user.category === 'host') {
          redirectLink = `/host/${user._id}`;
      } else if (user.category === 'admin') {
          redirectLink = `/admin`;
      }
      res.json({
          username,
          token,
          category: user.category,
          redirectLink,
          Authorization: token,
          "Content-Type": "application/json",
        });
        
        
    } catch (error) {
      console.error('Error during login:', error);
        // Log additional information about the error
      console.error('Error Stack:', error.stack);
      // Handle different types of errors
      if (error.name === 'ValidationError') {
        return res.status(400).json({ error: 'Invalid input data' });
      } else {
        return res.status(500).json({ error: 'Internal Server Error' });
      }
    }
});

// app.get('/:hostId', async (req, res) => {
//     try {
//       const { hostId } = req.params;
  
//       // Assuming hostId is the user's ID
//       const user = await User.findById(hostId);
  
//       if (!user) {
//         return res.status(404).json({ error: 'User not found' });
//       }
  
//       const { username } = user;
//       res.json({ message: `Welcome, ${username}!` });
//     } catch (error) {
//       console.error('Error getting welcome message:', error);
//       res.status(500).json({ error: 'Internal Server Error' });
//     }
// })

// app.get('/:hostId/visitor',async (req, res) => {
//     try {
//       // Assuming req.user is populated by your authentication middleware
//       const { userId } = req.user;
  
//       // Find the host by userId
//       const host = await User.findById(userId);
  
//       if (!host) {
//         return res.status(404).json({ error: 'Host not found' });
//       }
  
//       // Get visitors registered under the host
//       const visitors = host.visitors;
  
//       res.json({ visitors });
//     } catch (error) {
//       console.error('Error getting visitors:', error);
//       res.status(500).json({ error: 'Internal Server Error' });
//     }
// })

app.post('/admin/registerHost', async(req,res)=>{
    try {
        //to detect any error with your terminal
        console.log("Request body:", req.body);
        const { username, password, email, phoneNumber } = req.body;

        // Check if the username is unique (you can add more validation if needed)
        const existingUser = await User.findOne({ username });
        if (existingUser) {
            return res.status(400).json({ error: 'Username already exists' });
        }

        // // Hash the password using bcrypt
        // const hashedPassword = await bcrypt.hash(password, 10);

        // Create a new host
        const newHost = new User({
            username,
            password,
            email,
            phoneNumber,
            category: 'host', // Assuming 'host' is the category for hosts
        });

        // Save the new host to the database
        await newHost.save();

        res.status(201).json({ message: 'Host registered successfully' });
    } catch (error) {
        console.error('Error registering host:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }    
}



/**
* @swagger
* /host/{hostId}:
*   get:
*     security:
*       - Authorization: []
*     summary: Get welcome message for a host
*     description: Retrieve a welcome message for a specific host
*     tags: 
*       - Host
*     parameters:
*       - in: path
*         name: hostId
*         description: ID of the host
*         required: true
*         schema:
*           type: string
*     responses:
*       200:
*         description: Successful operation
*         content:
*           application/json:
*             schema:
*               type: object
*               properties:
*                 message:
*                   type: string
*                   description: Welcome message
*       401:
*         description: Unauthorized - Invalid or missing token
*       403:
*         description: Forbidden - Insufficient permissions
*       500:
*         description: Internal Server Error
* 
* /host/{hostId}/visitors:
*   get:
*     security:
*       - Authorization: []
*     summary: Get visitors for a host
*     description: Retrieve visitors registered under a specific host
*     tags: 
*       - Host
*     parameters:
*       - in: path
*         name: hostId
*         description: ID of the host
*         required: true
*         schema:
*           type: string
*     responses:
*       200:
*         description: Successful operation
*         content:
*           application/json:
*             schema:
*               type: array
*               items:
*                 $ref: '#/components/schemas/Visitor'
*       401:
*         description: Unauthorized - Invalid or missing token
*       403:
*         description: Forbidden - Insufficient permissions
*       500:
*         description: Internal Server Error
*/





/**
* @swagger
* /admin/registerHost:
*   post:
*     summary: Register a new host
*     description: Register a new host in the system (admin access required).
*     tags:
*       - Admin
*     requestBody:
*          required: true
*          content: 
*              application/json:
*                  schema:
*                      type: object
*                      properties:
*                          username:
*                              type: string
*                          password:
*                              type: string
*                          email:
*                              type: string
*                          phoneNumber:
*                              type: Number
*                      required:
*                          - username
*                          - password
*                          - email
*                          - phoneNumber
*     responses:
*       201:
*         description: Host registered successfully
*       400:
*         description: Bad Request - Invalid request payload
*       401:
*         description: Unauthorized - Invalid or missing token
*       403:
*         description: Forbidden - Insufficient permissions
*       500:
*         description: Internal Server Error
* 
* definitions:
*   HostRegistration:
*     type: object
*     properties:
*       username:
*         type: string
*         description: Host's username
*         example: john_doe
*       password:
*         type: string
*         description: Host's password
*         example: my_secure_password
*       email:
*         type: string
*         description: Host's email
*         example: john@example33.com
*       phoneNumber:
*         type: number
*         description: Host's phone number
*         example: 1234567890
*/

// middleware.js
const jwt = require('jsonwebtoken');

// Middleware to check if the request has a valid JWT token
module.exports.authenticateToken =(requiredRole) => async (req, res, next) => {
  // Extract the token from the Authorization header
  const header = req.headers['authorization'];
  
  // check first if whether the token is present, if not the app will crash 
  //then only do the header.split
  // Verify the token
  if (!header) {
    return res.status(401).json({ error: 'Unauthorized: Missing token' });
  }

  //split the bearer token 
  // take the index 1 , to exclude the bearer words
  let token = header.split(' ')[1];

  //to check whether the token pass in is what you want
//  console.log("Token",token);
  try {
    // Verify the token
    const decoded = jwt.verify(token, 'vms2');

    // Log decoded information for troubleshooting
    console.log('Decoded Token:', decoded);

    // Check if the token has the required role
    if (decoded.category !== requiredRole) {
      return res.status(403).json({ error: 'Forbidden: Insufficient permissions' });
    }

    // Attach user information to the request if needed
    req.user = decoded;
    next();
  } catch (err) {
    return res.status(403).json({ error: 'Forbidden: Invalid token' });
  }
};
